#[macro_use]
extern crate serde;
#[macro_use]
extern crate serde_json;

pub mod api {
    #[derive(Serialize, Deserialize, Debug)]
    #[serde(rename_all = "snake_case")]
    pub enum Provider {
        OpenAi,
        Anthropic,
        Groq,
        SelfHosted,
        Local,
    }

    #[derive(Debug, Serialize, Deserialize)]
    #[serde(untagged)]
    pub enum _StrOrArr {
        Str(String),
        Arr(Vec<String>),
    }

    pub mod chat {
        pub mod completions {
            use serde_json::{Map, Number, Value};

            #[derive(Debug, Serialize, Deserialize)]
            pub struct Request {
                #[doc = r"A list of messages comprising the conversation so far. Depending on the model you use, different message types (modalities) are supported, like text, images, and audio."]
                messages: Vec<Message>,
                #[doc = r"ID of the model to use. See the model endpoint compatibility table for details on which models work with the Chat API."]
                model: String,
                #[doc = r"Whether or not to store the output of this chat completion request for use in our model distillation or evals products."]
                store: Option<bool>,
                #[doc = r"o1 models only

Constrains effort on reasoning for reasoning models. Currently supported values are `low`, `medium`, and `high`. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response."]
                reasoning_effort: Option<String>,
                #[doc = r"Developer-defined tags and values used for filtering completions in the dashboard."]
                metadata: Option<Map<String, Value>>,
                #[doc = r"Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim."]
                frequency_penalty: Option<Number>,
                #[doc = r#"Modify the likelihood of specified tokens appearing in the completion.

Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token."#]
                logit_bias: Option<Map<String, Value>>,
                #[doc = r"Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`."]
                logprobs: Option<bool>,
                #[doc = r"An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used."]
                top_logprobs: Option<u8>,
                #[deprecated = r"The maximum number of tokens that can be generated in the chat completion. This value can be used to control costs for text generated via API.

This value is now deprecated in favor of `max_completion_tokens`, and is not compatible with o1 series models."]
                max_tokens: Option<usize>,
                #[doc = r"An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and reasoning tokens."]
                max_completion_tokens: Option<usize>,
                #[doc = r"How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs."]
                n: Option<usize>,
                #[doc = r#"Output types that you would like the model to generate for this request. Most models are capable of generating text, which is the default:

`["text"]`

The `gpt-4o-audio-preview` model can also be used to generate audio. To request that this model generate both text and audio responses, you can use:

`["text", "audio"]`"#]
                modalities: Option<Vec<String>>,
                #[doc = r#"Configuration for a Predicted Output, which can greatly improve response times when large parts of the model response are known ahead of time. This is most common when you are regenerating a file with only minor changes to most of the content."#]
                prediction: Option<Prediction>,
                #[doc = r#"Parameters for audio output. Required when audio output is requested with `modalities: ["audio"]`. Learn more."#]
                audio: Option<Audio>,
                #[doc = r"Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics."]
                presence_penalty: Option<Number>,
                #[doc = r#"An object specifying the format that the model must output.

Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema.

Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.

Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length."#]
                response_format: Option<ResponseFormat>,
                #[doc = r"Sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result. Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend."]
                seed: Option<u64>,
                #[doc = r#"Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:

  - If set to 'auto', and the Project is Scale tier enabled, the system will utilize scale tier credits until they are exhausted.
  - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.
  - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.
  - When not set, the default behavior is 'auto'.
"#]
                service_tier: Option<String>,
                #[doc = r"Up to 4 sequences where the API will stop generating further tokens."]
                stop: Option<crate::api::_StrOrArr>,
                #[doc = r"If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a `data: [DONE]` message."]
                stream: Option<bool>,
                #[doc = r"Options for streaming response. Only set this when you set `stream: true`."]
                stream_options: Option<StreamOptions>,
                #[doc = r"What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or `top_p` but not both."]
                temperature: Option<Number>,
                #[doc = r"An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

We generally recommend altering this or `temperature` but not both."]
                top_p: Option<Number>,
                #[doc = r"A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported."]
                tools: Option<Vec<Tools>>,
                #[doc = r#"Controls which (if any) tool is called by the model. `none` means the model will not call any tool and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools. Specifying a particular tool via `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool.

`none` is the default when no tools are present. `auto` is the default if tools are present."#]
                tool_choice: Option<ToolChoice>,
                #[doc = r"Whether to enable parallel function calling during tool use."]
                parallel_tool_calls: Option<bool>,
                #[doc = r"A unique identifier representing your end-user, which can help monitoring and detecting abuse."]
                user: Option<String>,
            }

            #[derive(Debug, Serialize, Deserialize)]
            #[serde(untagged)]
            pub enum Message {
                Developer {
                    content: crate::api::_StrOrArr,
                    role: messages::role::Developer,
                    name: Option<String>,
                },
                System {
                    content: crate::api::_StrOrArr,
                    role: messages::role::System,
                    name: Option<String>,
                },
                User {
                    content: messages::user::Content,
                    role: messages::role::User,
                    name: Option<String>,
                },
                Assistant {
                    content: messages::assistant::Content,
                    refusal: Option<String>,
                    role: messages::role::Assistant,
                    name: Option<String>,
                    audio: Option<messages::assistant::Audio>,
                    tool_calls: Option<Vec<messages::assistant::ToolCalls>>,
                    #[deprecated = "Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model."]
                    function_call: Option<messages::assistant::FunctionCall>,
                },
            }

            pub mod messages {
                pub mod role {
                    #[derive(Debug, Serialize, Deserialize)]
                    #[serde(rename_all = "snake_case")]
                    #[doc = r"since GPT-o1, replace system role"]
                    pub enum Developer {
                        Developer,
                    }
                    #[derive(Debug, Serialize, Deserialize)]
                    #[serde(rename_all = "snake_case")]
                    pub enum System {
                        System,
                    }
                    #[derive(Debug, Serialize, Deserialize)]
                    #[serde(rename_all = "snake_case")]
                    pub enum User {
                        User,
                    }
                    #[derive(Debug, Serialize, Deserialize)]
                    #[serde(rename_all = "snake_case")]
                    pub enum Assistant {
                        Assistant,
                    }
                    #[derive(Debug, Serialize, Deserialize)]
                    #[serde(rename_all = "snake_case")]
                    pub enum Tool {
                        Tool,
                    }
                }

                pub mod user {
                    #[derive(Debug, Serialize, Deserialize)]
                    #[serde(untagged)]
                    pub enum Content {
                        Str(String),
                        Arr(content::Part),
                    }

                    pub mod content {
                        #[derive(Debug, Serialize, Deserialize)]
                        #[serde(untagged)]
                        pub enum Part {
                            Text {
                                r#type: String,
                                text: String,
                            },
                            Image {
                                r#type: String,
                                image_url: ImageUrl,
                            },
                            Audio {
                                /// Always `input_audio`
                                r#type: String,
                                input_audio: InputAudio,
                            },
                        }

                        #[derive(Debug, Serialize, Deserialize)]
                        pub struct ImageUrl {
                            url: String,
                            detail: Option<String>,
                        }

                        #[derive(Debug, Serialize, Deserialize)]
                        pub struct InputAudio {
                            data: String,
                            format: String,
                        }
                    }
                }

                pub mod assistant {
                    #[derive(Debug, Serialize, Deserialize)]
                    #[serde(untagged)]
                    pub enum Content {
                        Str(String),
                        Arr(Vec<content::Part>),
                    }

                    pub mod content {
                        #[derive(Debug, Serialize, Deserialize)]
                        #[serde(untagged)]
                        pub enum Part {
                            Text { r#type: String, text: String },
                            Refusal { r#type: String, refusal: String },
                        }
                    }

                    #[derive(Debug, Serialize, Deserialize)]
                    pub struct Audio {
                        id: String,
                    }

                    #[derive(Debug, Serialize, Deserialize)]
                    pub struct ToolCalls {
                        id: String,
                        r#type: String,
                        function: tool_calls::Function,
                    }

                    /// The tool calls generated by the model, such as function calls.
                    pub mod tool_calls {
                        #[derive(Debug, Serialize, Deserialize)]
                        pub struct Function {
                            name: String,
                            arguments: String,
                        }
                    }

                    #[derive(Debug, Serialize, Deserialize)]
                    pub struct FunctionCall {
                        arguments: String,
                        name: String,
                    }
                }
            }

            #[derive(Debug, Serialize, Deserialize)]
            pub struct Prediction {
                r#type: String,
                content: prediction::Content,
            }

            pub mod prediction {
                #[derive(Debug, Serialize, Deserialize)]
                #[serde(untagged)]
                pub enum Content {
                    Text(String),
                    Parts(Vec<content::Part>),
                }

                pub mod content {
                    #[derive(Debug, Serialize, Deserialize)]
                    pub struct Part {
                        r#type: String,
                        text: String,
                    }
                }
            }

            #[derive(Debug, Serialize, Deserialize)]
            pub struct Audio {
                voice: String,
                format: String,
            }

            #[derive(Debug, Serialize, Deserialize)]
            #[serde(untagged)]
            pub enum ResponseFormat {
                Text {
                    r#type: response_format::r#type::Text,
                },
                JsonObject {
                    r#type: response_format::r#type::JsonObject,
                },
                JsonSchema {
                    r#type: response_format::r#type::JsonSchema,
                    json_schema: response_format::JsonSchema,
                },
            }

            pub mod response_format {
                pub mod r#type {
                    #[derive(Debug, Serialize, Deserialize)]
                    #[serde(rename_all = "snake_case")]
                    pub enum Text {
                        Text,
                    }
                    #[derive(Debug, Serialize, Deserialize)]
                    #[serde(rename_all = "snake_case")]
                    pub enum JsonObject {
                        JsonObject,
                    }
                    #[derive(Debug, Serialize, Deserialize)]
                    #[serde(rename_all = "snake_case")]
                    pub enum JsonSchema {
                        JsonSchema,
                    }
                }

                #[derive(Debug, Serialize, Deserialize)]
                #[serde(rename_all = "snake_case")]
                pub struct JsonSchema {
                    description: Option<String>,
                    name: String,
                    #[doc = r"The schema for the response format, described as a JSON Schema object."]
                    schema: Option<serde_json::Map<String, serde_json::Value>>,
                    #[doc = r"Whether to enable strict schema adherence when generating the output. If set to true, the model will always follow the exact schema defined in the schema field. Only a subset of JSON Schema is supported when strict is true."]
                    strict: Option<bool>,
                }
            }

            #[derive(Debug, Serialize, Deserialize)]
            #[serde(rename_all = "snake_case")]
            pub struct StreamOptions {
                /// If set, an additional chunk will be streamed before the `data: [DONE]` message. The `usage` field on this chunk shows the token usage statistics for the entire request, and the `choices` field will always be an empty array. All other chunks will also include a `usage` field, but with a null value.
                include_usage: Option<bool>,
            }

            #[derive(Debug, Serialize, Deserialize)]
            #[serde(rename_all = "snake_case")]
            pub struct Tools {
                r#type: String,
                function: tools::Function,
            }

            pub mod tools {
                #[derive(Debug, Serialize, Deserialize)]
                #[serde(rename_all = "snake_case")]
                pub struct Function {
                    description: Option<String>,
                    name: String,
                    #[doc = r"The parameters the functions accepts, described as a JSON Schema object.

Omitting `parameters` defines a function with an empty parameter list."]
                    parameters: Option<serde_json::Map<String, serde_json::Value>>,
                    strict: Option<bool>,
                }
            }

            #[derive(Debug, Serialize, Deserialize)]
            #[serde(untagged)]
            pub enum ToolChoice {
                Str(String),
                Obj(tool_choice::Choice),
            }

            pub mod tool_choice {
                #[derive(Debug, Serialize, Deserialize)]
                #[serde(rename_all = "snake_case")]
                pub struct Choice {
                    r#type: String,
                    function: ChosenFunction,
                }

                #[derive(Debug, Serialize, Deserialize)]
                #[serde(rename_all = "snake_case")]
                pub struct ChosenFunction {
                    name: String,
                }
            }
        }
    }
}

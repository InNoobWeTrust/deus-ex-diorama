#[macro_use]
extern crate serde;
#[macro_use]
extern crate serde_json;

pub mod gen_ai {
    #[derive(Serialize, Deserialize, Debug)]
    #[serde(rename_all = "snake_case")]
    pub enum Provider {
        OpenAi,
        Anthropic,
        Groq,
        SelfHosted,
        Local,
    }

    pub mod chat {
        pub mod completions {
            #[derive(Debug, Serialize, Deserialize)]
            pub struct Request {
                messages: Vec<Message>,
                model: String,
                metadata: Option<serde_json::Map<String, serde_json::Value>>,
            }

            #[derive(Debug, Serialize, Deserialize)]
            pub struct Message {
                role: Role,
                content: Content,
                name: Option<String>,
                /// refusal: assistant role only
                refusal: Option<String>,
                /// audio: assistant role only
                audio: Option<assistant::audio::_AudioObj>,
                /// tool_calls: assistant role only
                tool_calls: Option<Vec<assistant::tool_calls::_ToolCallsObj>>,
                /// tool_call_id: tool role only
                tool_call_id: Option<String>,
            }
            #[derive(Debug, Serialize, Deserialize)]
            #[serde(rename_all = "snake_case")]
            pub enum Role {
                System,
                User,
                /// developer: since GPT-o1
                Developer,
                Assistant,
                Tool,
            }

            #[derive(Debug, Serialize, Deserialize)]
            #[serde(untagged)]
            pub enum Content {
                Str(String),
                DeveloperArr(Vec<String>),
                SystemArr(Vec<String>),
                ToolArr(Vec<String>),
                UserArr(Vec<user::content::Part>),
                AssitantArr(Vec<assistant::content::Part>),
            }

            pub mod user {
                pub mod content {
                    #[derive(Debug, Serialize, Deserialize)]
                    #[serde(untagged)]
                    pub enum Part {
                        Text {
                            r#type: String,
                            text: String,
                        },
                        Image {
                            r#type: String,
                            image_url: ImageUrl,
                        },
                        Audio {
                            /// Always `input_audio`
                            r#type: String,
                            input_audio: InputAudio,
                        },
                    }

                    #[derive(Debug, Serialize, Deserialize)]
                    pub struct ImageUrl {
                        url: String,
                        detail: Option<String>,
                    }

                    #[derive(Debug, Serialize, Deserialize)]
                    pub struct InputAudio {
                        data: String,
                        format: String,
                    }
                }
            }

            pub mod assistant {
                pub mod content {
                    #[derive(Debug, Serialize, Deserialize)]
                    #[serde(untagged)]
                    pub enum Part {
                        Text { r#type: String, text: String },
                        Refusal { r#type: String, refusal: String },
                    }
                }

                pub mod audio {
                    /// Unique identifier for a previous audio response from the model.
                    #[derive(Debug, Serialize, Deserialize)]
                    #[serde(untagged)]
                    pub enum _AudioObj {
                        Id(String),
                    }
                }

                /// The tool calls generated by the model, such as function calls.
                pub mod tool_calls {
                    #[derive(Debug, Serialize, Deserialize)]
                    pub struct _ToolCallsObj {
                        id: String,
                        r#type: String,
                        function: _ToolCallsObjFnObj,
                    }

                    #[derive(Debug, Serialize, Deserialize)]
                    pub struct _ToolCallsObjFnObj {
                        name: String,
                        arguments: String,
                    }
                }
            }
        }
    }
}
